Description: >
    Kevin Ekue Udagram servers.

Parameters:

    EnvironmentName:
        Description: An environment name that will be prefixed to the resource names
        Type: String

    PubSub1:
        Description: Public Subnet 1
        Type: String

    PubSub2:
        Description: Public Subnet 2
        Type: String

    PrivSub1:
        Description: Priv Subnet 1
        Type: String

    PrivSub2:
        Description: Priv Subnet 2
        Type: String

    PrivSubs:
        Description: List of private Subnets
        Type: String

    VPCID:
        Description: VPC ID
        Type: String

    S3AllowedActions:
        Description: List of Managed Policies
        # Type: CommaDelimitedList 
        Type: String 
        Default:  "arn:aws:iam::246649355616:policy/s3UdagramReadOnlyPolicy"

    ResBucket: 
        Description: S3 Bucket
        Type: String



Resources:


    UdacityS3ReadOnlyEC2:
      Type: 'AWS::IAM::Role'
      Properties:
          AssumeRolePolicyDocument:
              Version: 2012-10-17
              Statement:
                - Effect: Allow
                  Principal:
                      Service:
                          - ec2.amazonaws.com
                  Action:
                        - 'sts:AssumeRole'
          Path: /
          ManagedPolicyArns:
              - !Sub  "${S3AllowedActions}"

  
    RootInstanceProfile:
      Type: 'AWS::IAM::InstanceProfile'
      Properties:
        Path: /
        Roles:
          - !Ref UdacityS3ReadOnlyEC2

    LoadBalancerSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties: 
            GroupDescription: Allow routing (http) to our application
            SecurityGroupEgress: 
              - CidrIp: 0.0.0.0/0
                FromPort: 80
                IpProtocol: tcp
                ToPort: 80

            SecurityGroupIngress: 
              - CidrIp: 0.0.0.0/0
                FromPort: 80
                IpProtocol: tcp
                ToPort: 80
            VpcId: 
                Fn::ImportValue:
                    !Sub "${VPCID}"

    WebServerSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties: 
            GroupDescription: Allow routing (http) to our hosts
            SecurityGroupEgress: 
              - CidrIp: 0.0.0.0/0
                FromPort: 80 #0
                IpProtocol: tcp
                ToPort: 80 #65535

            SecurityGroupIngress: 
              - CidrIp: 0.0.0.0/0
                FromPort: 80
                IpProtocol: tcp
                ToPort: 80
            
              - CidrIp: 0.0.0.0/0
                FromPort: 22
                IpProtocol: tcp
                ToPort: 22
            
            VpcId: 
                Fn::ImportValue:
                    !Sub "${VPCID}"


    WebAppLaunchConfig:
        Type: AWS::AutoScaling::LaunchConfiguration
        Properties:
            UserData:
                Fn::Base64: !Sub |
                    #!/bin/bash
                    apt-get update -y
                    apt-get install apache2 -y
                    systemctl start apache2.service
                    cd /var/www/html
                    aws s3 cp s3://udagram-bucket-kev/udagram.zip .unzip -o udacity.zip
                    ls
                    echo "Udacity Demo Web Server Up and Running!" > index.html

            ImageId: ami-003634241a8fcdec0
            IamInstanceProfile: !Ref RootInstanceProfile
            # KeyName: IAM KEY CREATED 
            SecurityGroups:
                - !Ref WebServerSecurityGroup
            InstanceType: t3.micro
            BlockDeviceMappings:
                - DeviceName: "/dev/sdk"
                  Ebs:
                    VolumeSize: '10'

    WebAppGroup:
        Type: AWS::AutoScaling::AutoScalingGroup
        Properties:
            VPCZoneIdentifier:
              - Fn::ImportValue: !Sub "${PrivSub1}"
              - Fn::ImportValue: !Sub "${PrivSub2}"
            LaunchConfigurationName:
                Ref: WebAppLaunchConfig
            MinSize: '2'
            MaxSize: '5'
            TargetGroupARNs:
            - Ref: WebAppTargetGroup

    WebAppLoadBalancer:
        Type: AWS::ElasticLoadBalancingV2::LoadBalancer
        Properties:
          #Scheme: internet-facing
          Subnets:
          - Fn::ImportValue: !Sub "${PubSub1}"
          - Fn::ImportValue: !Sub "${PubSub2}"
          SecurityGroups:
          - Ref: LoadBalancerSecurityGroup

    Listener:
        Type: AWS::ElasticLoadBalancingV2::Listener
        Properties:
          DefaultActions:
          - Type: forward
            TargetGroupArn:
              Ref: WebAppTargetGroup
          LoadBalancerArn:
            Ref: WebAppLoadBalancer
          Port: '80'
          Protocol: HTTP

    WebAppLoadBalancerListenerRule:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
            Actions:
              - Type: forward
                TargetGroupArn: !Ref 'WebAppTargetGroup'
            Conditions:
              - Field: path-pattern
                Values: [/]
            ListenerArn: !Ref 'Listener'
            Priority: 1

    WebAppTargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
          HealthCheckIntervalSeconds: 10
          HealthCheckPath: /
          HealthCheckProtocol: HTTP
          HealthCheckTimeoutSeconds: 8
          HealthyThresholdCount: 2
          Port: 80
          Protocol: HTTP
          UnhealthyThresholdCount: 5
          VpcId: 
                Fn::ImportValue:
                    !Sub "${VPCID}"



Outputs:
  LoadBalancer: 
        Description:  Load Balancer
        Value: !Join ["", ["http://", !GetAtt WebAppLoadBalancer.DNSName]]
        Export:
            Name: !Sub "${EnvironmentName}-LOAD-BALANCER"